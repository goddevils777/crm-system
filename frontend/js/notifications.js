// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ Ant Design
class NotificationSystem {
    constructor() {
        this.container = null;
        this.init();
    }

    init() {
        this.createContainer();
        this.loadStyles();
    }

    createContainer() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.container = document.createElement('div');
        this.container.id = 'notifications-container';
        this.container.className = 'notifications-container';
        document.body.appendChild(this.container);
    }

    loadStyles() {
        const notificationsCss = document.createElement('link');
        notificationsCss.rel = 'stylesheet';
        notificationsCss.href = `css/notifications.css?v=${Date.now()}`;

        if (!document.querySelector('link[href*="notifications.css"]')) {
            document.head.appendChild(notificationsCss);
        }
    }

    show(type, title, message, duration = 3000) { // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 4000 –¥–æ 3000ms
        const notification = this.createNotification(type, title, message, duration);
        this.container.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        if (duration > 0) {
            setTimeout(() => {
                this.hide(notification);
            }, duration);
        }

        return notification;
    }

    createNotification(type, title, message, duration) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;

        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };

        notification.innerHTML = `
      <div class="notification-icon">
        ${icons[type] || icons.info}
      </div>
      <div class="notification-content">
        <div class="notification-title">${title}</div>
        ${message ? `<div class="notification-message">${message}</div>` : ''}
      </div>
      <button class="notification-close" onclick="notifications.hide(this.closest('.notification'))">
        √ó
      </button>
      ${duration > 0 ? `<div class="notification-progress"></div>` : ''}
    `;

        // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        if (duration > 0) {
            const progressBar = notification.querySelector('.notification-progress');
            progressBar.style.animationDuration = `${duration}ms`;
        }

        return notification;
    }

    hide(notification) {
        notification.classList.add('hide');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞
    success(title, message, duration = 2500) { // 2.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —É—Å–ø–µ—Ö–∞
        return this.show('success', title, message, duration);
    }

    error(title, message, duration = 4000) { // 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ—à–∏–±–æ–∫ (—á—É—Ç—å –¥–æ–ª—å—à–µ)
        return this.show('error', title, message, duration);
    }

    warning(title, message, duration = 3500) { // 3.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        return this.show('warning', title, message, duration);
    }

    info(title, message, duration = 3000) { // 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        return this.show('info', title, message, duration);
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    clear() {
        const notifications = this.container.querySelectorAll('.notification');
        notifications.forEach(notification => this.hide(notification));
    }
}


// –ö—Ä–∞—Å–∏–≤—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ Ant Design
class ConfirmModal {
    constructor() {
        this.modal = null;
        this.createModal();
    }
    createModal() {
        this.modal = document.createElement('div');
        this.modal.className = 'confirm-modal';
        this.modal.style.display = 'none'; // –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
        this.modal.innerHTML = `
    <div class="confirm-modal-content">
      <div class="confirm-modal-header">
        <div class="confirm-icon">‚ö†Ô∏è</div>
        <h3 class="confirm-title">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
      </div>
      <div class="confirm-modal-body">
        <p class="confirm-message">–í—ã —É–≤–µ—Ä–µ–Ω—ã?</p>
      </div>
      <div class="confirm-modal-actions">
        <button class="btn btn-secondary confirm-cancel">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn btn-primary confirm-ok">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
      </div>
    </div>
  `;
        document.body.appendChild(this.modal);
    }

    show(title, message, type = 'warning') {
        return new Promise((resolve) => {
            const titleEl = this.modal.querySelector('.confirm-title');
            const messageEl = this.modal.querySelector('.confirm-message');
            const iconEl = this.modal.querySelector('.confirm-icon');
            const okBtn = this.modal.querySelector('.confirm-ok');
            const cancelBtn = this.modal.querySelector('.confirm-cancel');

            titleEl.textContent = title;
            messageEl.textContent = message;

            const icons = {
                warning: '‚ö†Ô∏è',
                danger: 'üóëÔ∏è',
                info: '‚ÑπÔ∏è',
                question: '‚ùì'
            };
            iconEl.textContent = icons[type] || icons.warning;

            if (type === 'danger') {
                okBtn.className = 'btn btn-danger confirm-ok';
                okBtn.textContent = '–£–¥–∞–ª–∏—Ç—å';
            } else {
                okBtn.className = 'btn btn-primary confirm-ok';
                okBtn.textContent = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å';
            }

            this.modal.style.display = 'flex';
            setTimeout(() => this.modal.classList.add('show'), 10);

            // –§–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã Enter
            setTimeout(() => okBtn.focus(), 100);

            const handleConfirm = () => {
                this.hide();
                resolve(true);
                cleanup();
            };

            const handleCancel = () => {
                this.hide();
                resolve(false);
                cleanup();
            };

            // –î–û–ë–ê–í–¨: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            const handleKeyDown = (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    handleConfirm();
                } else if (e.key === 'Escape') {
                    e.preventDefault();
                    handleCancel();
                }
            };

            const cleanup = () => {
                okBtn.removeEventListener('click', handleConfirm);
                cancelBtn.removeEventListener('click', handleCancel);
                this.modal.removeEventListener('click', handleModalClick);
                document.removeEventListener('keydown', handleKeyDown); // –î–û–ë–ê–í–¨
            };

            const handleModalClick = (e) => {
                if (e.target === this.modal) handleCancel();
            };

            okBtn.addEventListener('click', handleConfirm);
            cancelBtn.addEventListener('click', handleCancel);
            this.modal.addEventListener('click', handleModalClick);
            document.addEventListener('keydown', handleKeyDown); // –î–û–ë–ê–í–¨
        });
    }

    hide() {
        this.modal.classList.remove('show');
        setTimeout(() => {
            this.modal.style.display = 'none';
        }, 300);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
window.notifications = new NotificationSystem();
window.confirmModal = new ConfirmModal();

// –ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.confirmDelete = (message = '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å') => {
    return confirmModal.show('–£–¥–∞–ª–µ–Ω–∏–µ', message, 'danger');
};

window.confirmAction = (message = '–í—ã —É–≤–µ—Ä–µ–Ω—ã?') => {
    return confirmModal.show('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', message, 'question');
};