class TeamDetailModule {
    constructor() {
        this.teamId = null;
        this.team = null;
        this.buyers = [];
        this.currentView = 'grid';
        this.init();
    }

    async init() {
        // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–∞–Ω–¥—ã –∏–∑ URL
        const urlParams = new URLSearchParams(window.location.search);
        this.teamId = urlParams.get('teamId') || localStorage.getItem('current_team_detail');

        if (!this.teamId) {
            notifications.error('–û—à–∏–±–∫–∞', 'ID –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
            this.goBackToTeams();
            return;
        }

        this.setupEventListeners();
        await this.loadTeam();
        await this.loadBuyers();
        this.render();
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–æ–≤
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const view = e.currentTarget.dataset.view;
                if (view && view !== this.currentView) {
                    this.switchView(view);
                }
            });
        });
    }

    async loadTeam() {
        try {
            const response = await api.request(`/teams/${this.teamId}`);
            this.team = response.team;
            this.updateTeamHeader();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
            notifications.error('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã');
        }
    }

    async loadBuyers() {
        try {
            const response = await api.request(`/teams/${this.teamId}/buyers`);
            this.buyers = response.buyers;
            this.renderBuyers();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–µ—Ä–æ–≤:', error);
            notifications.error('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–µ—Ä–æ–≤');
        }
    }

    updateTeamHeader() {
        if (!this.team) return;

        document.getElementById('team-name').textContent = this.team.name;
        document.getElementById('buyers-count').textContent = this.team.buyers_count || 0;
        document.getElementById('cards-count').textContent = this.team.cards_count || 0;
        document.getElementById('total-balance').textContent = `${this.team.total_balance || 0} USD`;
    }

    renderBuyers() {
        if (this.currentView === 'grid') {
            this.renderBuyersGrid();
        } else {
            this.renderBuyersTable();
        }
    }

    renderBuyersGrid() {
        const container = document.getElementById('buyers-grid');

        if (this.buyers.length === 0) {
            container.innerHTML = '<p style="text-align: center; color: var(--text-secondary); padding: 40px;">–í –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –±–∞–µ—Ä–æ–≤</p>';
            return;
        }

        const buyersHtml = this.buyers.map(buyer => {
            // –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            const telegramHandle = buyer.telegram.startsWith('@') ? buyer.telegram : `@${buyer.telegram}`;

            return `
        <div class="buyer-card" onclick="window.teamDetailModule?.openBuyerDetail(${buyer.id})">
            <div class="buyer-card-header">
                <div class="buyer-info">
                    <h4 class="buyer-name">${buyer.username}</h4>
                    <div class="buyer-telegram">
                        <a href="https://t.me/${telegramHandle.replace('@', '')}" target="_blank" onclick="event.stopPropagation();" class="telegram-link">
                            üì± ${telegramHandle}
                        </a>
                    </div>
                </div>
                <div class="buyer-actions">
                    <button class="buyer-action-btn assign" onclick="event.stopPropagation(); window.teamDetailModule?.assignCards(${buyer.id})" title="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞—Ä—Ç—ã">
                        <svg width="14" height="14" viewBox="0 0 1024 1024" fill="currentColor">
                            <path d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"/>
                            <path d="M192 474h672q8 0 8 8v60q0 8-8 8H192q-8 0-8-8v-60q0-8 8-8z"/>
                        </svg>
                    </button>
                    <button class="buyer-action-btn delete" onclick="event.stopPropagation(); window.teamDetailModule?.deleteBuyer(${buyer.id})" title="–£–¥–∞–ª–∏—Ç—å">
                        <svg width="12" height="12" viewBox="0 0 1024 1024" fill="currentColor">
                            <path d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9c-4.4 5.2-.7 13.1 6.1 13.1h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"/>
                        </svg>
                    </button>
                </div>
            </div>
            <div class="buyer-stats">
                <div class="buyer-stat">
                    <div class="buyer-stat-value">${buyer.cards_count || 0}</div>
                    <div class="buyer-stat-label">–ö–∞—Ä—Ç</div>
                </div>
                <div class="buyer-stat">
                    <div class="buyer-stat-value">${buyer.total_balance || 0}</div>
                    <div class="buyer-stat-label">USD</div>
                </div>
            </div>
        </div>
    `;
        }).join('');

        container.innerHTML = buyersHtml;
    }

    renderBuyersTable() {
        const tbody = document.getElementById('buyers-table-body');

        if (this.buyers.length === 0) {
            tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; padding: 40px; color: var(--text-secondary);">–í –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –±–∞–µ—Ä–æ–≤</td></tr>';
            return;
        }

        const buyersHtml = this.buyers.map(buyer => {
            // –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            const telegramHandle = buyer.telegram.startsWith('@') ? buyer.telegram : `@${buyer.telegram}`;

            return `
        <tr>
            <td>
                <a href="#" class="buyer-name-link" onclick="window.teamDetailModule?.openBuyerDetail(${buyer.id}); return false;">
                    ${buyer.username}
                </a>
            </td>
            <td>
                <a href="https://t.me/${telegramHandle.replace('@', '')}" target="_blank" class="telegram-link">
                    ${telegramHandle}
                </a>
            </td>
            <td>${buyer.cards_count || 0}</td>
            <td>${buyer.total_balance || 0} USD</td>
            <td>${new Date(buyer.created_at).toLocaleDateString('ru-RU')}</td>
            <td>
                <div class="buyer-table-actions">
                    <button class="buyer-table-action-btn assign" onclick="window.teamDetailModule?.assignCards(${buyer.id})" title="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞—Ä—Ç—ã">
                        <svg width="14" height="14" viewBox="0 0 1024 1024" fill="currentColor">
                            <path d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"/>
                            <path d="M192 474h672q8 0 8 8v60q0 8-8 8H192q-8 0-8-8v-60q0-8 8-8z"/>
                        </svg>
                    </button>
                    <button class="buyer-table-action-btn delete" onclick="window.teamDetailModule?.deleteBuyer(${buyer.id})" title="–£–¥–∞–ª–∏—Ç—å">
                        <svg width="12" height="12" viewBox="0 0 1024 1024" fill="currentColor">
                            <path d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9c-4.4 5.2-.7 13.1 6.1 13.1h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"/>
                        </svg>
                    </button>
                </div>
            </td>
        </tr>
    `;
        }).join('');

        tbody.innerHTML = buyersHtml;
    }

    switchView(view) {
        this.currentView = view;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`.view-btn[data-view="${view}"]`)?.classList.add('active');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const gridContainer = document.getElementById('buyers-grid');
        const tableContainer = document.getElementById('buyers-table-container');

        if (view === 'grid') {
            gridContainer.style.display = 'grid';
            tableContainer.style.display = 'none';
        } else {
            gridContainer.style.display = 'none';
            tableContainer.style.display = 'block';
        }

        this.renderBuyers();
    }

    showAddBuyerModal() {
        const modal = document.getElementById('add-buyer-modal');
        modal.classList.add('show');

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.setupModalEvents();
    }

    setupModalEvents() {
        const modal = document.getElementById('add-buyer-modal');
        const form = document.getElementById('add-buyer-form');
        const closeBtn = modal.querySelector('.modal-close');
        const cancelBtn = modal.querySelector('.modal-cancel');

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeModal = () => {
            modal.classList.remove('show');
            form.reset();
        };

        closeBtn.onclick = closeModal;
        cancelBtn.onclick = closeModal;

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.onclick = (e) => {
            if (e.target === modal) closeModal();
        };

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        form.onsubmit = async (e) => {
            e.preventDefault();
            await this.handleAddBuyer(e);
        };
    }

    async handleAddBuyer(e) {
        const formData = new FormData(e.target);
        const buyerData = {
            username: formData.get('username').trim(),
            telegram: formData.get('telegram').trim()
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!buyerData.username || !buyerData.telegram) {
            notifications.error('–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        }

        if (buyerData.username.length < 2) {
            notifications.error('–û—à–∏–±–∫–∞', '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
            return;
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –±–∞–µ—Ä–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
            const response = await api.createBuyer(this.teamId, buyerData);

            notifications.success('–£—Å–ø–µ—Ö', `–ë–∞–µ—Ä "${buyerData.username}" —Å–æ–∑–¥–∞–Ω`);
            console.log('–°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', response.invitationLink);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            document.getElementById('add-buyer-modal').classList.remove('show');
            e.target.reset();

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadBuyers();
            await this.loadTeam();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–µ—Ä–∞:', error);
            notifications.error('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–µ—Ä–∞');
        }
    }

    async assignCards(buyerId) {
        const buyer = this.buyers.find(b => b.id === buyerId);
        if (!buyer) return;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('assign-modal-title').textContent = `–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞—Ä—Ç—ã –±–∞–µ—Ä—É ${buyer.username}`;

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            const response = await api.request(`/cards?team_id=${this.teamId}&unassigned=true`);
            const availableCards = response.cards || [];

            this.renderCardsForAssignment(availableCards);
            this.showAssignCardsModal(buyerId);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç:', error);
            notifications.error('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç');
        }
    }

    renderCardsForAssignment(cards) {
        const container = document.getElementById('available-cards-list');

        if (cards.length === 0) {
            container.innerHTML = `
            <div class="cards-empty-state">
                <h4>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç</h4>
                <p>–í—Å–µ –∫–∞—Ä—Ç—ã –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç –≤ –∫–æ–º–∞–Ω–¥–µ</p>
            </div>
        `;
            return;
        }

        const cardsHtml = cards.map(card => `
        <label class="card-item-checkbox">
            <input type="checkbox" value="${card.id}" name="selected-cards">
            <div class="card-info">
                <div class="card-name">${card.name}</div>
                <div class="card-details">
                    ${card.currency} ‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${card.balance || 0} ${card.currency} ‚Ä¢ 
                    –°—Ç–∞—Ç—É—Å: ${this.getStatusText(card.status)}
                </div>
            </div>
        </label>
    `).join('');

        container.innerHTML = cardsHtml;
    }

    getStatusText(status) {
        const statusMap = {
            'active': '–ê–∫—Ç–∏–≤–Ω–∞',
            'blocked': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞',
            'reissue': '–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫',
            'error': '–û—à–∏–±–∫–∞',
            'rebind': '–ü–µ—Ä–µ–ø–æ–¥–≤—è–∑–∞—Ç—å',
            'not_issued': '–ù–µ –≤—ã–¥–∞–Ω–∞',
            'not_spinning': '–ù–µ –∫—Ä—É—Ç–∏—Ç'
        };
        return statusMap[status] || status;
    }

    showAssignCardsModal(buyerId) {
        const modal = document.getElementById('assign-cards-modal');
        modal.classList.add('show');

        this.setupAssignModalEvents(buyerId);
    }

    setupAssignModalEvents(buyerId) {
        const modal = document.getElementById('assign-cards-modal');
        const assignBtn = document.getElementById('assign-selected-cards');
        const closeBtn = modal.querySelector('.modal-close');
        const cancelBtn = modal.querySelector('.modal-cancel');

        const closeModal = () => {
            modal.classList.remove('show');
        };

        closeBtn.onclick = closeModal;
        cancelBtn.onclick = closeModal;
        modal.onclick = (e) => {
            if (e.target === modal) closeModal();
        };

        assignBtn.onclick = () => this.handleAssignCards(buyerId, closeModal);
    }

    async handleAssignCards(buyerId, closeModal) {
        const checkboxes = document.querySelectorAll('input[name="selected-cards"]:checked');
        const selectedCardIds = Array.from(checkboxes).map(cb => parseInt(cb.value));

        if (selectedCardIds.length === 0) {
            notifications.warning('–í–Ω–∏–º–∞–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É');
            return;
        }

        try {
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–∂–¥—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
            for (const cardId of selectedCardIds) {
                await api.assignCardToBuyer(cardId, buyerId);
            }

            notifications.success('–£—Å–ø–µ—Ö', `–ù–∞–∑–Ω–∞—á–µ–Ω–æ ${selectedCardIds.length} –∫–∞—Ä—Ç`);
            closeModal();

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadBuyers();
            await this.loadTeam();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç:', error);
            notifications.error('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞—Ä—Ç—ã');
        }
    }

    async deleteBuyer(buyerId) {
        const buyer = this.buyers.find(b => b.id === buyerId);
        if (!buyer) return;

        const confirmed = await confirmDelete(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–∞–µ—Ä–∞ "${buyer.username}"?`);
        if (!confirmed) return;

        try {
            await api.deleteBuyer(buyerId);
            await this.loadBuyers();
            await this.loadTeam(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            notifications.success('–£—Å–ø–µ—Ö', `–ë–∞–µ—Ä "${buyer.username}" —É–¥–∞–ª–µ–Ω`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∞–µ—Ä–∞:', error);
            notifications.error('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∞–µ—Ä–∞');
        }
    }

    openBuyerDetail(buyerId) {
        notifications.info('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', '–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–∞–µ—Ä–∞ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ');
    }

    goBackToTeams() {
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID
        localStorage.removeItem('current_team_detail');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–æ–¥—É–ª—é –∫–æ–º–∞–Ω–¥
        if (window.app) {
            window.app.loadModule('teams');
        }
    }

    render() {
        // –ú–µ—Ç–æ–¥ —É–∂–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ HTML —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.teamDetailModule = null;

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è module-loader
window.TeamDetailModule = TeamDetailModule;