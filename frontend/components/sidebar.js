// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∞–π–¥–±–∞—Ä–∞
class SidebarComponent {
  constructor() {
    this.activeModule = localStorage.getItem('active_module') || 'cards';
    this.onModuleChange = null; // Callback –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥—É–ª—è
  }

  render() {
    const menuItems = [
      { id: 'cards', title: '–ö–∞—Ä—Ç—ã', icon: 'üí≥' },
      { id: 'expenses', title: '–†–∞—Å—Ö–æ–¥—ã', icon: 'üí∞' },
      { id: 'teams', title: '–ö–æ–º–∞–Ω–¥—ã', icon: 'üë•' },
      { id: 'clients', title: '–ö–ª–∏–µ–Ω—Ç—ã', icon: 'üìå' }, // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
      { id: 'income', title: '–î–æ—Ö–æ–¥—ã', icon: 'üìà' },
      { id: 'analytics', title: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: 'üìä' }
    ];

    const menuHtml = menuItems.map(item => `
     <li>
       <a href="#" data-module="${item.id}" class="menu-item ${item.id === this.activeModule ? 'active' : ''}">
         <span class="menu-icon">${item.icon}</span>
         <span class="menu-text">${item.title}</span>
       </a>
     </li>
   `).join('');

    return `
     <aside class="sidebar">
       <ul class="menu" id="main-menu">
         ${menuHtml}
       </ul>
     </aside>
   `;
  }

  mount(container) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–æ–º
    this.activeModule = localStorage.getItem('active_module') || 'cards';

    container.innerHTML = this.render();
    this.setupEvents();

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
    setTimeout(() => {
      this.setActiveModule(this.activeModule);
    }, 10);
  }

// –ó–ê–ú–ï–ù–ò–¢–¨ –º–µ—Ç–æ–¥ setupEvents –≤ frontend/components/sidebar.js:

setupEvents() {
  const menu = document.getElementById('main-menu');

  menu?.addEventListener('click', (e) => {
    e.preventDefault();
    const link = e.target.closest('.menu-item');
    if (link) {
      const module = link.dataset.module;
      
      console.log('=== SIDEBAR NAVIGATION ===');
      console.log('Clicked module:', module);
      console.log('Current hash:', window.location.hash);
      console.log('Is card detail page:', window.location.hash.startsWith('#card/'));

      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –ª—é–±–æ–π –º–æ–¥—É–ª—å
      if (window.location.hash.startsWith('#card/')) {
        console.log('Clearing card detail state before navigation');
        localStorage.removeItem('current_card_detail');
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ –∫–µ—à–∞
        if (window.moduleLoader) {
          window.moduleLoader.loadedModules.clear();
          console.log('Cleared module cache');
        }
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à
      window.history.replaceState({ module: module }, '', `#${module}`);
      console.log('New hash set:', window.location.hash);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
      this.setActiveModule(module);

      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
      if (this.onModuleChange) {
        console.log('Calling onModuleChange callback');
        this.onModuleChange(module);
      } else {
        console.error('onModuleChange callback not set');
      }
    }
  });
}

  setActiveModule(moduleName) {
    console.log('Setting active module:', moduleName);
    this.activeModule = moduleName;
    localStorage.setItem('active_module', moduleName);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –°–ï–õ–ï–ö–¢–û–† - –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –º–µ–Ω—é
    document.querySelectorAll('.menu-item').forEach(link => {
      link.classList.remove('active');
    });

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –°–ï–õ–ï–ö–¢–û–† - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
    const activeLink = document.querySelector(`.menu-item[data-module="${moduleName}"]`);
    console.log('Found active link:', activeLink);
    if (activeLink) {
      activeLink.classList.add('active');
      console.log('Added active class to:', moduleName);
    } else {
      console.error('Active link not found for module:', moduleName);
    }
  }

  setModuleChangeCallback(callback) {
    this.onModuleChange = callback;
  }
}

window.SidebarComponent = SidebarComponent;